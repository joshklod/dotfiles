" Backend
if has("multi_byte")
	set encoding =utf-8
endif

" Recognize custom xterm-style terminals - Vim internally sets extra termcap
" settings for terminals containing 'xterm'
if &term =~ 'mintty\|hterm'
	set term =xterm-semitruecolor
endif

" Get extra termcap entries
if executable('tput') == 1
	for [s:varname, s:capname, s:trust_default] in [
				\ ['&t_Cs', 'smwul',   0],
				\ ['&t_Ce', 'rmul',    0],
				\ ['&t_8f', 'setrgbf', 1],
				\ ['&t_8b', 'setrgbb', 1]]
		if !exists(s:varname) | continue | endif

		let s:capstr = system('tput '.s:capname)
		if v:shell_error | let s:capstr = '' | endif

		if empty(s:capstr) && s:trust_default | continue | endif

		" Vim interprets these as printf() format strings
		if s:varname =~# 't_8[fb]'
			let s:capstr = substitute(s:capstr, '%p\d%d', '%lu', 'g')
		endif

		execute 'let' s:varname '=' string(s:capstr)
	endfor
endif

if has("eval")
	" Check whether file exists anywhere in path
	function! s:fileInPath(path, glob)
		for fname in globpath(a:path, a:glob, 0, 1)
			if filereadable(fname) || isdirectory(fname)
				return 1
			endif
		endfor
		return 0
	endfunction

	" Check whether file exists in 'runtimepath'
	function! s:fileInRTP(path)
		return s:fileInPath(&rtp, a:path)
	endfunction

	" Check whether package is installed
	function! s:havePack(path)
		return has('packages') && s:fileInPath(&pp, 'pack/'.a:path)
	endfunction

	" Check whether package plugin is installed
	function! s:havePackPlug(path)
		return s:havePack('*/start/'.a:path)
	endfunction

	" Check whether plugin is installed
	function! s:havePlug(path)
		return s:fileInRTP(a:path) || s:havePackPlug('*/'.a:path)
	endfunction

	" Check whether optional plugin is installed
	function! s:haveOptPlug(path)
		return s:havePack('*/opt/'.a:path)
	endfunction

	" Check whether color scheme is installed
	function! s:haveColors(name)
		let rtpPath = 'colors/'.a:name.'.vim'
		return s:fileInRTP(rtpPath) || s:haveOptPlug('*/'.rtpPath)
	endfunction

	" Handy shortcut for name of runtimepath directory in $HOME on current
	" system (because Windows just has to be different...)
	let s:homertp = $HOME . (has("win32") ? "/vimfiles" : "/.vim")

	" Compatible with termguicolors
	" Termguicolors requires that both the terminal and Vim are truecolor
	" capable.  The environment variable $COLORTERM is usually not set
	" automatically - this must be done manually (typically in .bashrc) when
	" using a truecolor-capable terminal.
	let s:has_tgc = has("termguicolors") && $COLORTERM == "truecolor" &&
				\ !empty(&t_8f) && !empty(&t_8b)

	" Some features only look good with truecolor
	let s:truecolor = s:has_tgc || has("gui_running")
	" Some features only look good with at least 256 colors
	let s:fancy_colors = &t_Co >= 256 || s:truecolor
endif

" Load Packages
if has('packages')
	packloadall
else
	" Use Pathogen to load packages anyway
	if s:fileInRTP("pack/main/start/vim-pathogen/autoload/pathogen.vim")
		runtime pack/main/start/vim-pathogen/autoload/pathogen.vim
		execute pathogen#infect()
	endif
endif

" Set sensible defaults
if s:fileInRTP('plugin/sensible.vim')
	runtime! plugin/sensible.vim
elseif filereadable($VIMRUNTIME . "/defaults.vim")
	unlet! skip_defaults_vim
	silent! source $VIMRUNTIME/defaults.vim
endif

" Plugins
if has("autocmd")
	filetype plugin indent on
endif
if s:fileInRTP("plugin/templates.vim")
	let g:templates_directory = s:homertp."/templates"
endif

" Syntax highlighting
set background =dark
if has("syntax")
	if s:has_tgc
		set termguicolors
	endif
	syntax enable
	if s:haveColors('solarized8') && s:fancy_colors
		colorscheme solarized8

		highlight SpellBad ctermfg=160 guifg=#dc322f guisp=#dc322f " Red
	else
		colorscheme industry
	endif

	" Color Overrides
	if has("terminal")
		highlight Terminal ctermbg=0 ctermfg=7 guibg=#000000 guifg=#CDCDCD
		if s:truecolor
			let g:terminal_ansi_colors = [
						\ '#000000', '#CD0000', '#00CD00', '#CDCD00',
						\ '#007FFF', '#CD00CD', '#00CDCD', '#CDCDCD',
						\ '#7F7F7F', '#FF0000', '#00FF00', '#FFFF00',
						\ '#5CA0FF', '#FF00FF', '#00FFFF', '#FFFFFF']
		endif
	endif
endif

" Movement
set scrolloff     =8
set nostartofline

" Visual indicators
set list
" Set this first, then reset it in case we don't have +eval
set listchars =tab:>\ ,trail:~,extends:>,precedes:<,nbsp:\ "
if has("multi_byte")
	" Use let instead of set so we don't have to include unicode chars
	" literally
	let &listchars = "tab:\u203a ,trail:\u00b7,extends:\u00bb,"
	             \ . "precedes:\u00ab,nbsp:\u00b7"
endif
if has("syntax")
	if s:fancy_colors
		set cursorline
	endif
	set colorcolumn =+2 " Always 2 columns right of textwidth
endif
set number relativenumber
if has("linebreak")
	set numberwidth =3
endif
if has("cmdline_info")
	set ruler " Show file position info on statusline
	if has("statusline")
		set rulerformat=%5l,%v%=\ %P " Hide byte column number
	endif
	set showcmd
endif
if has("cursorshape") && exists('+t_SH') && !empty(&t_SH)
	" Cursor Shape Reference:
	"                Blinking Solid
	"          Block     1      2
	"     Underscore     3      4
	"            Bar     5      6
	"          Reset     0      0
	let &t_EI .= substitute(&t_SH, '%p1%d', '2', '') " Normal Mode
	let &t_SI .= substitute(&t_SH, '%p1%d', '5', '') " Insert Mode
	let &t_SR .= substitute(&t_SH, '%p1%d', '3', '') " Replace Mode

	let &t_ti .= substitute(&t_SH, '%p1%d', '2', '') " Vim Start
	let &t_te .= substitute(&t_SH, '%p1%d', '0', '') " Vim Exit
endif
if has('title')
	set title
endif

" Spell checking
if has("syntax")
	set spelllang =en_us
	let &spellfile = s:homertp . "/spell/local.utf-8.add,"
	             \ . s:homertp . "/spell/personal.utf-8.add"
endif

" Tab behavior
set tabstop     =4
set shiftwidth  =0 " Use value of tabstop
set softtabstop =0 " Disabled
set smarttab       " Use shiftwidth at beginning of line, and tabstop (or
                   "   softtabstop) elsewhere
set noexpandtab
set autoindent     " Keep indent of previous line

" Line wrapping
set nowrap
set formatoptions =cjloqr2 " Hard wrapping behavior
if has("linebreak")
	set linebreak
	if exists("&breakindent")
		set breakindent
		set breakindentopt =min:20,shift:8
	endif
	if has("multi_byte")
		let &showbreak = "\u00bb "
	else
		set showbreak =>\ "
	endif
endif

" Window behavior
if has("windows")
	set splitbelow
	set laststatus =2 " Always show status line
	if has("vertsplit")
		set splitright
		" Leave extra space for line numbers
		if has("linebreak")
			let &winwidth = 80 + &numberwidth
		else
			set winwidth =83
		endif
		set winminwidth =20
	endif
endif

" Editing behavior
if has("virtualedit")
	set virtualedit =block
endif
set textwidth     =78
if has("mouse")
	set mouse =a " Enable mouse
	if has("mouse_sgr")
		set ttymouse =sgr " Enable advanced mouse behavior
	endif
endif

" Search paths
if has("file_in_path")
	" Current file and working directories first
	set path =.,,
	" Compiler headers
	if has("path_extra")
		set path +=/usr/lib/gcc/**2/include-fixed
		set path +=/usr/lib/gcc/**2/include
	endif
	" Standard header files
	set path +=/usr/local/include
	set path +=/usr/include
	" Cross-target headers
	if has("path_extra")
		set path +=/usr/local/**1/include
		set path +=/usr/**1/include
	endif
endif
set tags +=./.tags,.tags

" Navigation
nmap <X1Mouse> <C-O>
nmap <X2Mouse> <C-I>

" Searching
set ignorecase
set smartcase  " Ignore case only when all lowercase
if has("extra_search")
	set hlsearch
endif

" Folding
set foldminlines =4
if has("eval")
	let g:javaScript_fold = 1
endif

" Autocmds
if has("autocmd")
	augroup vimrc
		" Remove all vimrc autocommands
		autocmd!
		" Node.js auto-formatted config file
		autocmd BufNewFile,BufRead package.json setl sw=2 et
	augroup END
endif

" Macros
" Redo search using vimgrep
nnoremap <Leader>vg :vimgrep /<C-R>// 
" Search in all files
nnoremap <Leader>* :let @/='\<'.expand("<cword>").'\>'<CR>
                 \ :vimgrep /<C-R>// %:p:h/*<CR>
" Re-detect filetype
nnoremap <Leader>fd :filetype detect<CR>
" Jump to git conflict markers
nnoremap <Leader>gc /\%^/;/^\([<=>]\)\@=\1\{7}<CR>
" :Kappa:
nnoremap <Up><Up><Down><Down><Left><Right><Left><Right>ba<CR>
			\ :topl 1new<Bar>setl bt=nofile bh=hide noswf<CR>i  Lives:
			\ 1<Esc>0254@=":sleep 20m\<lt>CR>$\<lt>C-A>0"<CR>:echo
			\ 'Secret Bonus Unlocked!'<CR>

" Delete trailing whitespace
nmap <Leader>d <Plug>DelWhite
xmap <Leader>d <Plug>DelWhite

if has("eval")
	" Using a function preserves search history and hlsearch
	function! s:DelWhite()
		let line = getline(".")
		let repl = substitute(line, '\s\+$', "", "")
		call setline(".", repl)
	endfunction
	noremap <silent> <SID>DelWhite :call <SID>DelWhite()<CR>
endif
sil! while 0 " No eval
	" Fall back to basic search command
	noremap <silent> <SID>DelWhite :s/\s\+$//e <Bar> nohlsearch<CR>
sil! endwhile
nnoremap <script> <Plug>DelWhite <SID>DelWhite
vnoremap <script> <Plug>DelWhite <SID>DelWhite

" Toggle 'spell' option
nmap <F8> <Plug>ToggleSpell
vmap <F8> <Plug>ToggleSpell
imap <F8> <Plug>ToggleSpell

noremap  <silent>  <SID>ToggleSpell :set spell! <Bar> set spell?<CR>
nnoremap <script> <Plug>ToggleSpell      <SID>ToggleSpell
vnoremap <script> <Plug>ToggleSpell <C-C><SID>ToggleSpellgv
inoremap <script> <Plug>ToggleSpell <C-O><SID>ToggleSpell

" Custom commands
if has("user_commands")
	" Show all tabstop-related options
	command! -bar Taboptions set ts? sw? sts? et? sta?
	command! -bar Topt       Taboptions

	" Open scratchpad in new buffer
	command! -bar Scratch <mods> new | setl bt=nofile bh=hide noswf

	" Open giti terminal in new window
	command! -bar Giti <mods> term ++close giti

	" Start Grip server in terminal window
	command! -bar Grip <mods> term ++close grip %

	" Replace smart quotes with ASCII quotes
	command! -bar -range QuoteFix
				\ silent! <line1>,<line2>s/\%u2018\|\%u2019/'/g |
				\ silent! <line1>,<line2>s/\%u201c\|\%u201d/"/g

	command! -nargs=1 -complete=shellcmd Run
				\ <mods> new | setl bt=nofile bh=hide noswf | 0read !<args>
endif

" Source local vimrc
if filereadable(s:homertp."/local.vimrc")
	execute 'source '.s:homertp."/local.vimrc"
endif
