" Source default vimrc
if filereadable($VIMRUNTIME . "/defaults.vim")
	unlet! skip_defaults_vim
	source $VIMRUNTIME/defaults.vim
endif

if has("eval")
	" Check whether file exists in 'runtimepath'
	function s:ExistsRTP(path)
		return !empty(globpath(&rtp, a:path))
	endfunction

	" Handy shortcut for name of runtimepath directory in $HOME on current
	" system (because Windows just has to be different...)
	let s:homertp = $HOME . (has("win32") ? "/vimfiles" : "/.vim")
endif

" Plugins
if s:ExistsRTP("autoload/pathogen.vim")
	" Start plugin manager
	execute pathogen#infect()
endif
if has("autocmd")
	filetype plugin indent on
endif

" Syntax highlighting
if has("syntax")
	if has("termguicolors") && $COLORTERM == "truecolor"
		set termguicolors
		let &t_8f         ="\<Esc>[38;2;%lu;%lu;%lum"
		let &t_8b         ="\<Esc>[48;2;%lu;%lu;%lum"
	endif
	set background =dark
	syntax enable
	if s:ExistsRTP("colors/solarized.vim")
		let g:solarized_termcolors =256
		let g:solarized_menu       =0
		colorscheme solarized
	endif
	if s:ExistsRTP("autoload/togglebg.vim")
		call togglebg#map("")
	endif
endif

" Movement
set scrolloff     =8
set nostartofline

" Visual indicators
set list
" Set this first, then reset it in case we don't have +eval
set listchars =tab:>\ ,trail:~,extends:>,precedes:<,nbsp:\ "
if has("multi_byte")
	" Use let instead of set so we don't have to include unicode chars
	" literally
	let &listchars = "tab:\u203a ,trail:\u00b7,extends:\u00bb,"
	             \ . "precedes:\u00ab,nbsp:\u00b7"
endif
if has("syntax")
	set cursorline
	set colorcolumn =+2 " Always 2 columns right of textwidth
endif

" Spell checking
if has("syntax")
	set spelllang =en_us
	let &spellfile = s:homertp . "/spell/local.utf-8.add,"
	             \ . s:homertp . "/spell/personal.utf-8.add"
endif

" Tab behavior
set tabstop     =4
set shiftwidth  =0  " Use value of tabstop
set softtabstop =-1 " Use value of shiftwidth
set noexpandtab
set autoindent

" Line wrapping
set nowrap
if has("linebreak")
	set linebreak
	if exists("&breakindent")
		set breakindent
		set breakindentopt =min:20,shift:8
	endif
	if has("multi_byte")
		let &showbreak = "\u00bb "
	else
		set showbreak =>\ "
	endif
endif

" Window behavior
if has("windows")
	set splitbelow
	set laststatus =2 " Always show status line
	if has("vertsplit")
		set splitright
		set winwidth    =80
		set winminwidth =20
	endif
endif

" Editing behavior
if has("virtualedit")
	set virtualedit =block
endif
set formatoptions =croqlj " Specify default line-wrapping behavior
set textwidth     =78
if has("mouse")
	set mouse =a " Enable mouse
	if has("mouse_sgr")
		set ttymouse =sgr " Enable advanced mouse behavior
	endif
endif

" Tags
set tags +=./.tags,.tags,/usr/local/lib/**/tags,/usr/local/lib/**/.tags

" Navigation
map <X1Mouse> <C-O>
map <X2Mouse> <C-I>

" Searching
set ignorecase
set smartcase  " Ignore case only when all lowercase

" Macros
" Delete trailing whitespace
nmap <silent> ,d :s/\s\+$//<CR>
" Change word
nmap <silent> cc lbce
